//**************The program that implements the basic functionality of the shell*************
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <string.h>

//*******************************************************************************************
#define N 16
#define M 80
void Exe(char *arpointer[]);                        // Procedure of execution
void Pars(char arsymb[N][M]);                       // Procedure of reading a string
int cycle = 1;                                      // End of input flag
int word = 0;                                       // Number of words
int i,j;
char arsymb[N][M];                                  // Array of symbols

//**************Main program*****************************************************************
int main() {
     while (cycle) {
        printf("=> ");
        Pars(arsymb); 
        if (word == -1)
            continue;                               // If special value is recieved, missing iteration 
        char *arpointer[word+1];                    // Array of pointers
            for (int i = 0; i <= word; i++) {
            arpointer[i] = arsymb[i]; 
                                            }
            arpointer[word+1] = NULL;               // Terminal null at the end of the string  
        Exe(arpointer); 
                   }
    printf("\n");
    return 0;
           }

//**************Read and Pars****************************************************************
void Pars(char arsymb[N][M]) {
    char c;
    int i = 0, j = 0, IN = 0;                       // Number of words; symbol number; in/out a word
    while ( (c = getchar()) != EOF) {
        if ((c == ' ')&(IN == 1)) {                 // End of word
            i++;
            j = 0;
            continue;
                                  }       
        if ((c == '\n')&(i == 0)&(IN == 0)) {       // Empty enter
            word = -1;
            return;
                                            }
        if ( c == '\n') {                           // Enter in the end of input
            word = i;
            return;
                        }
        
        if (c != ' ') {                             // Not space symbol
            arsymb[i][j++] = c;
            arsymb[i][j] ='\0';
            IN = 1;
                      }
                                    }  
    cycle = 0;                                      // End of input
    word = i;
	if ((i == 0)&(j == 0))
	    word = -1;   
                             }

//**************Execution*******************************************************************
void Exe(char *arpointer[]) {
    pid_t child_pid = fork(); 
    if (!child_pid) {                               // Child branch
        if (execvp(arpointer[0],arpointer) == -1) { // Execution and error checking
            perror("exexvp");
            exit(1);
                                                  }
        exit(0); 
                    } 
    int pid = wait(NULL);                           // Parent branch
    if (pid == -1) { 
        perror("wait");
        exit(1);
                   }
                            }
